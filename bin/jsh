#!/usr/bin/env python
"""
The jsh commandline interface.

Use jshlib for the library to create your own JSH applicaitons.
"""
from __future__ import unicode_literals
import sys
import itertools
import json
import jshlib

if sys.version_info[0] == 2:
    DecodeError = ValueError
else:
    DecodeError = json.JSONDecodeError


def error_obj(argv, code, message, data=None):
    if data is None:
        data = {}
    data['argv'] = argv
    return jshlib.Error(code=code, message=message, data=data).serialize()


def parse_arg(arg):
    """Parse the argument and return (type, value)"""
    if arg.startswith("--"):
        param_value = arg.split('=', 1)
        if len(param_value) != 2:
            msg = "params must be of the form --key=<json string>. Got: {}".format(arg)
            return jshlib.ERROR, msg

        param, valuestr = param_value
        param = param[2:]
        try:
            value = json.loads(valuestr)
        except DecodeError as e:
            msg = "param '{}' with value=<{}> did not parse: {}".format(param, valuestr, e)
            return jshlib.ERROR, msg

        return jshlib.PARAMS, (param, value)

    if arg.startswith('rpc.'):
        return jshlib.ERROR, "method must not start with \'rpc.\': {}".format(arg)

    return jshlib.METHOD, arg


def main(argv):
    errors = []

    method = None
    params = {}

    for arg in itertools.islice(argv, 1, None):
        ty, obj = parse_arg(arg)
        if ty is jshlib.METHOD:
            if method is None:
                method = obj
            else:
                errors.append(
                    log("Found a second method specified: {}".format(obj)))
        elif ty is jshlib.PARAMS:
            param, value = obj

            if param in params:
                errors.append(
                    log('found at least two params with same key: {}'.format(param)))
            else:
                params[param] = value
        elif ty is jshlib.ERROR:
            errors.append(log(obj))
        else:
            err = error_obj(
                argv=argv,
                code=jshlib.Error.INTERNAL_ERROR,
                message="unknown type",
                data={'type': ty},
            )
            jshlib.write_payload(err)
            return 1

    if not method:
        errors.append(log("no method found"))

    if errors:
        err = error_obj(
            argv=argv,
            code=jshlib.Error.INVALID_PARAMS,
            message="errors encountered when parsing arguments",
            data={"errors": errors}
        )
        jshlib.write_payload(err)
        return 2

    request = jshlib.Request(method=method, params=params)

    jshlib.write_payload(request.serialize())
    return 0


if __name__ == '__main__':
    main(sys.argv)

